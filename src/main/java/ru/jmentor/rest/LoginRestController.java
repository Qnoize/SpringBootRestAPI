package ru.jmentor.rest;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.ResponseEntity;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.BadCredentialsException;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import ru.jmentor.dto.AuthenticationRequestDto;import ru.jmentor.model.User;import ru.jmentor.security.jwt.JwtAuthenticationException;import ru.jmentor.security.jwt.JwtTokenProvider;import ru.jmentor.service.UserService;import java.util.HashMap;import java.util.Map;@RestController@RequestMapping(value = "/rest/auth")public class LoginRestController {    private final AuthenticationManager authenticationManager;    private final JwtTokenProvider jwtTokenProvider;    private final UserService userService;    @Autowired    public LoginRestController(AuthenticationManager authenticationManager, JwtTokenProvider jwtTokenProvider, UserService userService) {        this.authenticationManager = authenticationManager;        this.jwtTokenProvider = jwtTokenProvider;        this.userService = userService;    }    @PostMapping("/")    public ResponseEntity login(@RequestBody AuthenticationRequestDto requestDto) {        try {            String username = requestDto.getUsername();            authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username, requestDto.getPassword()));            User user = userService.findByUsername(username);            if (user == null) {                throw new UsernameNotFoundException("User with username: " + username + " not found");            }            String token = jwtTokenProvider.createToken(username, user.getRoles());            Map<Object, Object> response = new HashMap<>();            response.put("username", username);            response.put("token", token);            return ResponseEntity.ok(response);        } catch (JwtAuthenticationException e) {            throw new BadCredentialsException("Invalid username or password");        }    }}