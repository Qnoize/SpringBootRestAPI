package ru.jmentor.security.provider;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.core.Authentication;import org.springframework.security.core.AuthenticationException;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.stereotype.Component;import ru.jmentor.model.Token;import ru.jmentor.repository.TokensRepository;import ru.jmentor.security.token.TokenAuthentication;import ru.jmentor.service.UserDetailsServiceImpl;import java.util.Optional;@Componentpublic class TokenAuthenticationProvider implements AuthenticationProvider {    private TokensRepository tokensRepository;    private UserDetailsServiceImpl userDetailsServiceimpl;    @Autowired    public TokenAuthenticationProvider(UserDetailsServiceImpl userDetailsServiceimpl, TokensRepository tokensRepository){        this.tokensRepository = tokensRepository;        this.userDetailsServiceimpl = userDetailsServiceimpl;    }    @Override    public Authentication authenticate(Authentication authentication) throws AuthenticationException {        TokenAuthentication tokenAuthentication = (TokenAuthentication)authentication;        Optional<Token> tokenCandidate = tokensRepository.findOneByValue(tokenAuthentication.getName());        if (tokenCandidate.isPresent()) {            UserDetails userDetails = userDetailsServiceimpl.loadUserByUsername(tokenCandidate.get().getUser().getLogin());            tokenAuthentication.setUserDetails(userDetails);            tokenAuthentication.setAuthenticated(true);            return tokenAuthentication;        }        throw new IllegalArgumentException("Bad token");    }    @Override    public boolean supports(Class<?> authentication) { return TokenAuthentication.class.equals(authentication); }}