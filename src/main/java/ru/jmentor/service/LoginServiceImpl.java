package ru.jmentor.service;import org.apache.commons.lang3.RandomStringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.stereotype.Service;import ru.jmentor.form.LoginForm;import ru.jmentor.model.Token;import ru.jmentor.model.User;import ru.jmentor.repository.TokensRepository;import ru.jmentor.repository.UserRepository;import ru.jmentor.transfer.TokenDto;import java.util.Optional;import static ru.jmentor.transfer.TokenDto.from;@Servicepublic class LoginServiceImpl implements LoginService {    private TokensRepository tokensRepository;    private PasswordEncoder passwordEncoder;    private UserRepository userRepository;    @Autowired    public void setRepository(TokensRepository tokensRepository, PasswordEncoder passwordEncoder, UserRepository userRepository) {        this.tokensRepository = tokensRepository;        this.passwordEncoder = passwordEncoder;        this.userRepository = userRepository;    }    @Override    public TokenDto login(LoginForm loginForm) {        Optional<User> userCandidate = Optional.ofNullable(userRepository.findByUserLogin(loginForm.getLogin()));        if(userCandidate.isPresent()){            User user = userCandidate.get();            if(passwordEncoder.matches(loginForm.getPassword(), user.getPassword())){                Token token = Token.builder()                        .user(user)                        .value(RandomStringUtils.random(10, true, true))                        .build();                tokensRepository.save(token);                return from(token);            }        }        throw new IllegalArgumentException("User not found");    }}